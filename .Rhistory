install.packages(c("dlnm","Epi","tsModel","mvmeta",”metafor”,”lubridate”))
install.packages(c("dlnm"))
install.packages(c("Epi","tsModel","mvmeta","metafor","lubridate"))
X <- rbinom(50, 1, 0.3)
head(X)
mean(X)
var(X)
X <- rbinom(50, 1, 0.3)
head(X)
mean(X)
var(X)
X <- rbinom(100, 10, 0.48)
head(X)
options(repr.plot.height=5, repr.plot.width=5)
hist(X)
mean(X)
var(X)
X <- rbinom(5000, 10, 0.48)
head(X)
options(repr.plot.height=5, repr.plot.width=5)
hist(X)
mean(X)
var(X)
X <- rbinom(10000000, 10, 0.48)
head(X)
options(repr.plot.height=5, repr.plot.width=5)
hist(X)
mean(X)
var(X)
X <- rbinom(100, 10, 0.08)
head(X)
options(repr.plot.height=5, repr.plot.width=5)
hist(X)
mean(X)
var(X)
X <- rpois(100, 3)
head(X)
options(repr.plot.height=5, repr.plot.width=5)
hist(X)
mean(X)
var(X)
mu <- 13
sigma2 <- 5
X <- rnorm(1000, mu, sigma2)
options(repr.plot.height=5, repr.plot.width=5)
hist(X)
mu <- 13
sigma2 <- 5
X <- rnorm(1000, mu, sigma2)
options(repr.plot.height=5, repr.plot.width=5)
hist(X)
mu <- 13 head(r)
mu<- 13
sigma2<-5
X<-rnorm(1000, mu, sigma2)
head(2)
options(repr.plot.height=5, repr.plot.width=5)
hist(x)
hist(X)
summary(r)
summary(3)
# Graphics package
install.packages("ggplot2")
# Will be used for fitting some generalised models:
install.packages("VGAM")
# Contains some useful goodness-of-fit diagnostics:
install.packages("pscl")
install.packages("sandwich")
3+2/3
sin(3) ; 3^4
(3+ exp(2)-2*sqrt(5))
(3+exp(2))
(3+exp(2)
-2*
sqrt(5))
3+"elvis"
(3+exp(2)
sqrt(5))
sin(3) ; 3^4
clear
singer<- "Eddie Vedder"
singer=
3
singer
singer<- "Eddie Vedder"
singer
x
x<- 3
x: singer
x; singer
x
z<- 4
x+z
x
## [1] 3
## [1] 6
x
z
obs<- rnorm(n=5, mean=3, sd=2)
obs
ls
getwd()
ls()
rm(list=ls())
print("Hello HDM!")
load("~/Documents/Coding/R exercises/Rscriptexercises/07.labelindex_exercises.R")
myvec <- c(a=1, b=7, c=3)
# fourth type: a sequence of element names
names(yearfirstlp) <-  c("Muse","Neil Young","Stone Roses")
# labelling elements of a vector with tags
yearfirstlp <- c(Muse=1999, "Neil Young"=1968, "Stone Roses"=1989)
yearfirstlp[c("Muse","Stone Roses")]
# labelling elements of a vector with tags
yearfirstlp <- c(Muse=1999, "Neil Young"=1968, "Stone Roses"=1989)
yearfirstlp
names(yearfirstlp)
# fourth type: a sequence of element names
names(yearfirstlp) <-  c("Muse","Neil Young","Stone Roses")
yearfirstlp[c("Muse","Stone Roses")]
# labelling elements of a vector with tags
yearfirstlp <- c(Muse=1999, "Neil Young"=1968, "Stone Roses"=1989)
yearfirstlp[c("Muse","Stone Roses")]
# indexing matrices or arrays: multiple dimensions, use of comma as in print
mymat
1
matrix
mymat
mymat
# labelling matrices
mymat <- matrix(1:6, nrow=2, ncol=3, dimnames=list(c("r1","r2"), c("c1","c2","c3")))
mymat
mymat[2, c(1,3)]
mode(mymat[2, c(1,3)])
mymat[2, c(1,3)]
mymat[2,c(1,3), drop=FALSE]
# create a data frame with tags for variables
bands <- data.frame(name=c("The Cure","dEUS","Pearl Jam","Pink Floyd"),
year=c(1976,1991,1990,1965), country=c("UK","Belgium","USA","UK"))
bands
# indexing data frames: list-wise
bands[c(1,3)]
# indexing data frames: list-wise
bands[c(1,3)]
# similarly, just a single variable
bands[1]
# alternatively, extract the variable itself
bands[[1]]
# or matrix-wise
bands[,1]
View(mymat)
View(bands)
num_vec<- (21:30)
num_vec<- c(21:30)
char_vec<- c( mango, blueberries, peach)
char_vec<- c( "mango", "blueberries", "peach")
char_vec<- c( "mango"=mango, "blueberries"=blueberries, "peach"=peach)
char_vec<- c( "mango"=mango, "blueberries"=blueberries, "peach"=peach)
char_vec<- c( mango="mango", blueberries= "blueberries", peach="peach")
mat_A <-(1:16, nrow=4)
mat_A <-(1:16 nrow=4)
mat_A <-(c(1:16) ,nrow=4)
mat_A <-matrix(c(1:16) ,nrow=4)
data(births)
library(Epi)
library(births)
data(births)
View(births)
small_births<- births[:2, 4]
small_births<- births[:c(2, 4)]
small_births<- births[,c(2, 4)]
head(small_births, 5)
t(mat_A)
mat_A[,1]
sum1<- sum(mat_A[,1])
sum1
View(mat_A)
sum1<- sum(t(mat_A)[,1])
colsums(t(mat_A))
colSums(t(mat_A))
View(small_births)
View(small_births)
long_gestation <- small_births$gestwks>280
long_gestation
long_gestation<- small_births[small_births$gestwks>280]
long_gestation<- small_births[,small_births$gestwks>280]
long_gestation <- small_births$gestwks>280/7
long_gestation
data(mtcars)
summary(mtcars)
data(births)
bweight <- births$bweight
bweight[1:10]
head(bweight, 10)
View(bands)
View(births)
quantile(bweight, probs=0.25)
View(small_births)
bweight
mat <- matrix(rnorm(5*8), nrow=5)
mat
names(esoph)
head(esoph, 5)
esoph[, c("agegp","ncontrols","tobgp")]
head(esoph, 5)
## ####
## 7
## ####
summary(esoph)
esoph["agegp"=="65-74"]
esoph["agegp"=="65-74"] & esoph["agegp"=="75+"]
esoph["agegp"=="65-74"] & esoph["agegp"=="75+"]
library(dplyr)
esoph$agegp == "65-74" | esoph$agegp == "75+",]
esoph$agegp == "65-74" | esoph$agegp == "75+"
View(mtcars)
fourgearslowseight <- mtcars[mtcars$gear==4 &mtcars$wt<3]
fourgearslowseight <- mtcars[mtcars$gear==4 & mtcars$wt<3]
fourgearslowseight <- mtcars[mtcars$gear==4 & mtcars$wt<3.0]
fourgearslowseight <- mtcars[mtcars$gear==4 & mtcars$wt<3.0,]
head(fourgearsloweight, 4)
head(fourgearslowweight, 4)
fourgearslowweight <- mtcars[mtcars$gear==4 & mtcars$wt<3.0,]
head(fourgearslowweight, 4)
fourgearslowweight <- mtcars[mtcars$gear==4 & mtcars$wt<3.0]
fourgearslowweight <- mtcars[mtcars$gear==4 & mtcars$wt<3.0]
fourgearslowweight <- mtcars[mtcars$gear==4 & mtcars$wt<3.0, "hp"]
head(fourgearslowweight, 4)
mean(fourgearslowseight)
head(fourgearslowweight, 4)
mode(fourgearslowseight)
my_list<- list(numbers= c(fourgearslowweight))
mean(my_list$numbers)
head(esoph, 10)
head(esoph[,c("agegp","ncontrols"),10])
head(esoph[c("agegp","ncontrols")],10)
data(esoph)
View(esoph)
# define a condition for selecting the observations
rightage<-filter(esoph, "agegp"=="25-34" | "agegp"=="35-44" | "agegp"=="45-54")
rightage[,c(3,5)]
# define a condition for selecting the observations
rightage<-filter(esoph, "agegp"=="25-34" | "agegp"=="35-44" | "agegp"=="45-54")
rightage
# define a condition for selecting the observations
rightage<-filter(esoph, agegp=="25-34" | agegp=="35-44" | agegp=="45-54")
# define a condition for selecting the observations
rightage<-filter(esoph, agegp=="25-34" | agegp=="35-44" | agegp=="45-54")
rightage
numvec1
numvec1<- c(4, 2, -7, 16, -2)
[numvec1<0]<- 0
[numvec1<0]==0
numvec1[numvec1<0]`==0
numvec1[numvec1<0]`==0
numvec1[numvec1<0]==0
numvec1[numvec1<0]<-0
numvec1
data(esoph)
subset(esoph,tobacco%in%c("10-19","20-29")()
subset(esoph,tobacco%in%c("10-19","20-29")
subset(esoph,tobacco%in%c("10-19","20-29"))
subset(esoph,tobacco%in%c("10-19","20-29"),select=c(alcohol, tobacco, cases, controls))
View(esoph)
View(esoph)
subset(esoph,tobgp%in%c("10-19","20-29"),select=c(alcohol, tobgp, cases, controls))
subset(esoph,tobgp%in%c("10-19","20-29"),select=c(alcgp, tobgp, cases, controls))
subset(esoph,tobgp%in%c("10-19","20-29"),select=c(alcgp, tobgp, cases, controls))
subset(esoph,tobgp%in%c("10-19","20-29"),select=c(alcgp, tobgp, ncases, ncontrols))
# Obtain the probability distribution function (for values x=0,1,...,8)
x <- seq(0,8)
pi <- 0.23
px <- dbinom(x, 8, pi)
# Create bar chart of PDF
options(repr.plot.width=4, repr.plot.height=4)
barplot(height=px, names=x)
setwd("/Users/angelchang/Documents/Coding/programming-assessment")
setwd("/Users/angelchang/Documents/Coding/programming-assessment")
births<- read.csv("/files/births.csv")
births<- read.csv("~/files/births.csv")
setwd("/Users/angelchang/Documents/Coding/programming-assessment/files")
births<- read.csv("~/files/births.csv")
setwd("/Users/angelchang/Documents/Coding/programming-assessment")
births<- read.csv("~/files/births.csv")
setwd("/Users/angelchang/Documents/Coding/programming-assessment")
births<- read.csv("/files/births.csv")
setwd("/Users/angelchang/Documents/Coding/programming-assessment")
scores<- read.csv("~/files/score.csv")
births <- read.csv("~/Documents/Coding/programming-assessment/files/births.csv")
View(births)
setwd("~/Documents/Coding/programming-assessment")
births <- read.csv("~/Documents/Coding/programming-assessment/files/births.csv")
setwd("~/Documents/Coding/programming-assessment")
scores<- read.csv("~/files/score.csv")
setwd("~/Documents/Coding/programming-assessment")
births <- read.csv("~/files/births.csv")
births <- read.csv("files/births.csv")
setwd("~/Documents/Coding/programming-assessment")
View(births)
# Examine the births dataset
births.head(10)
# Examine the births dataset
head(births)
setwd("~/Documents/Coding/programming-assessment")
# Read in data from the two files
births_df <- read.csv("files/births.csv")
score_df<- read.csv("files/scores.csv")
setwd("~/Documents/Coding/programming-assessment")
# Read in data from the two files
births_df <- read.csv("files/births.csv")
score_df<- read.csv("files/score.csv")
# Examine the births dataset
head(births)
# Transform variables to factors with labels
births_df$lowbw <- factor(births_df$lowbw, levels = c(0, 1),
labels = c("Normal birthweight", "Low birthweight"))
births_df$preterm <- factor(births_df$preterm, levels = c(0, 1),
labels = c("Not preterm", "Preterm"))
births_df$hyp <- factor(births_df$hyp, levels = c(0, 1),
labels = c("No maternal hypertension", "Maternal hypertension"))
births_df$sex <- factor(births_df$sex, levels = c(1, 2),
labels = c("Male", "Female"))
# Display the first few rows of the data.frame to check the changes
head(births_df)
str(births_df)
births_df_clean <- na.omit(births_df)
score_df_clean <- na.omit(score_df)
# Combine the datasets keeping both matching and unmatching records.
merged_df <- merge(births_df_clean, score_df_clean, by = "id", all = TRUE)
View(merged_df)
View(merged_df)
str(merged_df)
summary(merged_df)
str(merged_df)
# Reorder the merged dataset by the "score" variable.
sorted_merged_df <- merged_df[order(merged_df$score),]
View(sorted_merged_df)
e continuous variables
# Name the continuous variables
continuous_variables <- merged_df[, c("bweight", "matage", "gestwks", "score")]
# Compute correlation matrix, using the argument 'use' to handle missing values
correlation_matrix <- cor(continuous_variables, use = "pairwise.complete.obs")
print(correlation_matrix)
# Print the correlation matrix
print("Correlation matrix: ")
print(correlation_matrix)
# Print the correlation matrix
print("Correlation matrix: /n correlation_matrix")
# Print the correlation matrix
print("Correlation matrix: /n" correlation_matrix)
# Print the correlation matrix
print("Correlation matrix:" correlation_matrix)
# Print the correlation matrix
print(correlation_matrix)
Function to print the crosstab and its title
print_crosstab <- function(data, row_var, col_var, title) {
cat(title, ":\n")
print(table(data[[row_var]], data[[col_var]]))
cat("\n") # for spacing
}
# Now call this function for each pair of variables
print_crosstab(merged_df, "sex", "hyp", 'Sex and Hypertension distribution')
print_crosstab(merged_df, "sex", "preterm", 'Sex and Preterm distribution')
print_crosstab(merged_df, "preterm", "hyp", 'Preterm and Hypertension distribution')
print_crosstab(merged_df, "sex", "lowbw", 'Low birthweight and Sex distribution')
print_crosstab(merged_df, "lowbw", "hyp", 'Low birthweight and Hypertension distribution')
print_crosstab(merged_df, "lowbw", "preterm", 'Low birthweight and Preterm distribution')
library(dplyr)
merged_df <- merged_df %>%
mutate(highscore = factor(case_when(
score > 150 ~ "Yes",
score <= 150 ~ "No",
is.na(score) ~ "No Score",  # For NA values in score
TRUE ~ "No Score"  # Default case if none of the above conditions are met
)))
aggregate(bweight ~ highscore + sex, data=merged_df, FUN=mean)
variable high score that identifies scores greater than 150.
merged_df$highscore <- with(merged_df, ifelse(is.na(score), "No Score",
ifelse(score > 150, "Yes", "No")))
# Convert the highscore variable to a factor
merged_df$highscore <- factor(merged_df$highscore, levels = c("No", "Yes", "No Score"))
aggregate(bweight ~ highscore + sex, data=merged_df, FUN=mean)
library(ggplot2)
library(ggplot2)
ggplot(merged_df, aes(x = gestwks, y = bweight)) +
geom_point(alpha = 0.5) + # Adds the scatter plot points with transparency
geom_smooth(method = "lm", se = FALSE) + # Adds a regression line without displaying the confidence interval
labs(x = "Gestational age (weeks)", y = "Birthweight (grams)",
title = "Relationship Between Gestational Weeks and Birthweight") +
theme_minimal(base_size = 14) + # Sets a minimal theme with base font size
theme(plot.title = element_text(hjust = 0.5, vjust = 2)) + # Centers the title and adds vertical space
ggsave("Bweightvsgestwks.pdf", device = "pdf") # Saves the plot as a PDF
rlang::last_trace()
p <- ggplot(merged_df, aes(x = gestwks, y = bweight)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", formula = y ~ x) +
labs(x = "Gestational age (weeks)",
y = "Birthweight (grams)",
title = "Relationship Between Gestational Weeks and Birthweight") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# Display the plot
print(p)
# Now you can save the plot using ggsave()
ggsave("Bweightvsgestwks.pdf", plot = p, device = "pdf", width = 7, height = 7)
BweightvsgestwksR.pdf
p <- ggplot(merged_df, aes(x = gestwks, y = bweight)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", formula = y ~ x) +
labs(x = "Gestational age (weeks)",
y = "Birthweight (grams)",
title = "Relationship Between Gestational Weeks and Birthweight") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# Display the plot
print(p)
# Now you can save the plot using ggsave()
ggsave("BweightvsgestwksR.pdf
# Now you can save the plot using ggsave()
ggsave("BweightvsgestwksR.pdf", plot = p, device = "pdf", width = 7, height = 7)
# Now you can save the plot using ggsave()
ggsave("BweightvsgestwksR.pdf", plot = p, device = "pdf", width = 7, height = 7)
# Save final dataframe
write.csv(merged_df, file="finaldatasetfromR.csv", row.names=FALSE)
